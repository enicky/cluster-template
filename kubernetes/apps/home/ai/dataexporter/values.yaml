# Default values for DataExporter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
namespace: ai
replicaCount: 1
image:
  repository: neichmann/dataexporter
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "app-77"
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations:
  dapr.io/config: "appconfig"
  dapr.io/app-id: dataexporter
  dapr.io/app-port: "8080"
  dapr.io/enabled: "true"
  dapr.io/metrics-port: "63895"
  dapr.io/unix-domain-socket-path: ""
env: {}
podLabels: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}

service:
  type: ClusterIP
  port: 8080
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

livenessProbe: {}
# httpGet:
#   path: /
#   port: http
readinessProbe: {}
# httpGet:
#   path: /
#   port: http
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
# Additional volumes on the output Deployment definition.
volumes:
  - name: ai-prob-results-main
    persistentVolumeClaim:
      claimName: ai-python-results

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: ai-prob-results-main
    mountPath: /app/checkpoints
    subPath: ai-prob-results-checkpoints

nodeSelector: {}
tolerations: []
affinity: {}

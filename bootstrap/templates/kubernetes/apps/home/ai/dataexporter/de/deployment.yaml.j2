apiVersion: apps/v1
kind: Deployment
metadata:
  name: #{ bootstrap_ai.dataexporter.fullname | default('dataexporter') }#
  namespace: #{ bootstrap_ai.namespace | default('ai') }#
spec:
  revisionHistoryLimit: 3
  #% if not bootstrap_ai.dataexporter.autoscaling.enabled %#
  replicas: #{ bootstrap_ai.dataexporter.replicaCount }#
  #% endif %#
  selectors:
    matchLabels:
      app: #{ bootstrap_ai.dataexporter.fullname }#
  template:
    metadata:
      annotations:
      #% for key, value in bootstrap_ai.dataexporter.podAnnotations.items() %#
        #{ key }#: "#{ value }#"
      #% endfor %#
      labels:
        app: #{ bootstrap_ai.dataexporter.fullname }#
        app.kubernetes.io/name: #{ bootstrap_ai.dataexporter.fullname }#
        app.kubernetes.io/instance: #{ bootstrap_ai.dataexporter.fullname }#
        app.kubernetes.io/version: #{ bootstrap_ai.dataexporter.image.tag }#
        app.kubernetes.io/component: dataexporter
    spec:
      revisionHistoryLimit: 3
      containers:
        - name: #{ bootstrap_ai.dataexporter.name }#
          image: "#{ bootstrap_ai.dataexporter.image.repository }#:#{ bootstrap_ai.dataexporter.image.tag  }#"
          imagePullPolicy: #{ bootstrap_ai.dataexporter.image.pullPolicy }#
          ports:
            - name: http
              containerPort: #{ bootstrap_ai.dataexporter.service.port }#
              protocol: TCP
          resources:
            requests:
              cpu: #{ bootstrap_ai.dataexporter.resources.requests.cpu }#
              memory: #{ bootstrap_ai.dataexporter.resources.requests.memory }#
            limits:
              cpu: #{ bootstrap_ai.dataexporter.resources.limits.cpu }#
              memory: #{ bootstrap_ai.dataexporter.resources.limits.memory }#
          envFrom:
            - secretRef:
                name: secret-dataexporter
            - configMapRef:
                name: config-dataexporter-env
          volumeMounts:
            #% for mount in bootstrap_ai.dataexporter.volumeMounts %#
            - name: #{ mount.name }#
              mountPath: #{ mount.mountPath }#
              #% if mount.readOnly is defined %#
              readOnly: #{ mount.readOnly | default(false) }#
              #% endif %#
            #% endfor %#
      volumes:
        #% for mount in bootstrap_ai.dataexporter.volumes %#
          - name: #{ mount.name }#
            configMap:
              name: #{ mount.configMap.name }#
        #% endfor %#
